{"version":3,"sources":["components/AgregarCita.js","actions/validarActions.js","actions/citasActions.js","components/ListadoCitas.js","reducers/citasReducer.js","reducers/validacionReducer.js","reducers/index.js","store.js","localstorage.js","App.js","serviceWorker.js","index.js"],"names":["AgregarCita","useState","mascota","guardarMascota","propietario","guardarPropietario","fecha","guardarFecha","hora","guardarHora","sintomas","guardarSintomas","dispatch","useDispatch","validarFormulario","estado","type","payload","validarFormularioAction","error","useSelector","state","className","onSubmit","e","cita","preventDefault","trim","id","uuid","agregarCitaAction","placeholder","value","onChange","target","ListadoCitas","citas","mensaje","Object","keys","length","map","key","onClick","initialState","combineReducers","action","filter","storageState","citasStorage","localStorage","getItem","JSON","parse","obtenerStateStorage","store","createStore","reducer","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","citasState","stringify","setItem","guardarStateStorage","getState","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02fd513d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { agregarCitaAction } from '../actions/citasActions';\r\nimport { validarFormularioAction } from '../actions/validarActions';\r\n\r\nimport uuid from 'uuid/v4'\r\n\r\nconst AgregarCita = () =>\r\n{\r\n\r\n    //State del componente\r\n    const [mascota, guardarMascota] = useState('');\r\n    const [propietario, guardarPropietario] = useState('');\r\n    const [fecha, guardarFecha] = useState('');\r\n    const [hora, guardarHora] = useState('');\r\n    const [sintomas, guardarSintomas] = useState('');\r\n\r\n    //Dispatch para ejectuar nuestras acciones\r\n    const dispatch = useDispatch();\r\n    const agregarNuevaCita = (cita) => dispatch(agregarCitaAction(cita));\r\n    const validarFormulario = (estado) => dispatch(validarFormularioAction(estado));\r\n\r\n    //useSelector es similar a MapStateProps en Hooks\r\n    const error = useSelector( (state) => state.error );\r\n\r\n    //Cuando es el formulario es enviado\r\n    const submitNuevaCita = e => \r\n    {\r\n        e.preventDefault();\r\n\r\n        //Validar el formulario\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') \r\n        {\r\n            validarFormulario(true);\r\n            return;\r\n        }\r\n\r\n        validarFormulario(false);\r\n\r\n        //Crear la nueva cita\r\n        agregarNuevaCita({\r\n            id: uuid(),\r\n            mascota,\r\n            propietario,\r\n            hora,\r\n            fecha,\r\n            sintomas\r\n        })\r\n\r\n        //Reiniciar el formulario\r\n        guardarMascota('');\r\n        guardarPropietario('');\r\n        guardarHora('');\r\n        guardarFecha('');\r\n        guardarSintomas('');\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"card mt-5\">\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title text-center mb-5\">Agrega las citas aqui</h2>\r\n\r\n                <form onSubmit={submitNuevaCita}>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                            <input \r\n                                type=\"text\" \r\n                                className=\"form-control\" \r\n                                placeholder=\"Nombre Mascota\" \r\n                                value={mascota}\r\n                                onChange={ e => guardarMascota(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                            <input \r\n                                type=\"text\" \r\n                                className=\"form-control\"  \r\n                                placeholder=\"Nombre Dueño de la Mascota\"\r\n                                value={propietario}\r\n                                onChange={e => guardarPropietario(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\r\n                        <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\r\n                            <input \r\n                                type=\"date\" \r\n                                className=\"form-control\"\r\n                                value={fecha}\r\n                                onChange={ e => guardarFecha(e.target.value)}\r\n                            />\r\n                        </div>                            \r\n\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\r\n                        <div className=\"col-sm-8 col-lg-4\">\r\n                            <input \r\n                                type=\"time\" \r\n                                className=\"form-control\" \r\n                                value={hora}\r\n                                onChange={ e => guardarHora(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Sintomas</label>\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                            <textarea \r\n                                className=\"form-control\"\r\n                                value={sintomas}\r\n                                onChange={ e => guardarSintomas(e.target.value)}\r\n                            ></textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row justify-content-end\">\r\n                        <div className=\"col-sm-3\">\r\n                            <button type=\"submit\" className=\"btn btn-success w-100\">Agregar</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                {error.error ? <div className=\"alert alert-danger text-center p2\"> Todos los campos son obligatorios </div> : null}\r\n               \r\n            </div>\r\n    </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AgregarCita;","export const validarFormularioAction = estado =>\r\n{\r\n    return {\r\n        type: 'VALIDAR_FORMULARIO',\r\n        payload: estado\r\n    }\r\n}","export const agregarCitaAction = cita =>\r\n{\r\n    return {\r\n        type: 'AGREGAR_CITA',\r\n        payload: cita\r\n    }\r\n}\r\n\r\nexport const borrarCitaActions = id =>\r\n{\r\n    return {\r\n        type: 'BORRAR_CITA',\r\n        payload: id\r\n    }\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { borrarCitaActions } from '../actions/citasActions';\r\n\r\nconst ListadoCitas = () => {\r\n\r\n    //obtener las citas del state\r\n    const citas = useSelector((state) => state.citas);\r\n\r\n    //mensaje condicional\r\n    const mensaje = Object.keys(citas.citas).length === 0 ? 'No Hay Citas' : 'Administra las Citas aqui';\r\n\r\n    //dispatch para mandar a llamar la accion de eliminar\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    return (\r\n        \r\n        <div className=\"card mt-5\">\r\n            <div className=\"card-body\">\r\n                <h2 className=\"card-title text-center\">{mensaje}</h2>\r\n                <div className=\"lista-citas\">\r\n                    {citas.citas.map(cita => (\r\n                        <div key={cita.id} className=\"media mt-3\">\r\n                        <div className=\"media-body\">\r\n                            <h3 className=\"mt-0\">{cita.mascota}</h3>\r\n                            <p className=\"card-text\"><span>Nombre Dueño:</span> {cita.propietario}</p>\r\n                            <p className=\"card-text\"><span>Fecha:</span> {cita.fecha}</p>\r\n                            <p className=\"card-text\"><span>Hora:</span> {cita.hora}</p>\r\n                            <p className=\"card-text\"><span>Sintomas:</span> <br /> {cita.sintomas} </p>\r\n                            <button \r\n                                className=\"btn btn-danger\"\r\n                                onClick={() => dispatch(borrarCitaActions(cita.id))}\r\n                                \r\n                            >Borrar &times;\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default ListadoCitas;","const initialState = \r\n{\r\n    citas: []\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type) {\r\n        case 'AGREGAR_CITA':\r\n            return {\r\n                    ...state,\r\n                    citas: [...state.citas, action.payload]\r\n                }\r\n        case 'BORRAR_CITA':\r\n            return {\r\n                ...state,\r\n                citas: state.citas.filter(cita => cita.id !== action.payload)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","const initialState = \r\n{\r\n    error:false\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type) {\r\n        case 'VALIDAR_FORMULARIO':\r\n            return {\r\n                    ...state,\r\n                    error: action.payload\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport citasReducer from './citasReducer';\r\nimport validacionReducer from './validacionReducer';\r\n\r\nexport default combineReducers(\r\n    {\r\n        citas: citasReducer,\r\n        error: validacionReducer\r\n    }\r\n)","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\nimport { obtenerStateStorage, guardarStateStorage } from './localstorage';\r\n\r\n//Definir el state\r\n//const initialState = [];\r\n\r\n//Obtener citas del LocalStorage\r\nconst storageState = obtenerStateStorage();\r\n\r\nexport const store = createStore(\r\n\r\n    reducer,\r\n    storageState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && \r\n    window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\n);\r\n\r\nstore.subscribe( () => {\r\n    guardarStateStorage({\r\n        citas: store.getState().citas\r\n    });\r\n})\r\n\r\nexport default store;","export const obtenerStateStorage = () =>\r\n{\r\n    const citasStorage = localStorage.getItem('citas');\r\n    if(citasStorage === null)\r\n    {\r\n        return undefined\r\n    }\r\n    return JSON.parse(citasStorage);\r\n}\r\n\r\nexport const guardarStateStorage = state =>\r\n{\r\n    const citasState = JSON.stringify(state);\r\n    localStorage.setItem('citas',citasState);\r\n}","import React from 'react';\nimport AgregarCita from './components/AgregarCita';\nimport ListadoCitas from './components/ListadoCitas';\n\n//Redux\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <div className=\"container\">\n          <header>\n            <h1 className=\"text-center\"> Administrador de Pacientes de Veterinaria</h1>\n          </header>\n        \n\n            <div className=\"row mt-3\">\n                <div className=\"col-md-6\">\n                  <AgregarCita />\n                </div>\n                <div className=\"col-md-6\">\n                  <ListadoCitas />\n                </div>      \n            </div>\n\n        </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}